<?php

namespace Ycore\Exceptions;

use Illuminate\Database\Eloquent\ModelNotFoundException;
use Illuminate\Foundation\Exceptions\Handler as ExceptionHandler;
use Symfony\Component\HttpKernel\Exception\MethodNotAllowedHttpException;
use Throwable;
use Ycore\Jobs\EmailJob;

class Handler extends ExceptionHandler
{

    /**
     * A list of exception types with their corresponding custom log levels.
     *
     * @var array<class-string<\Throwable>, \Psr\Log\LogLevel::*>
     */
    protected $levels = [
        //
    ];

    /**
     * A list of the exception types that are not reported.
     *
     * @var array<int, class-string<\Throwable>>
     */
    protected $dontReport = [
        //
    ];

    /**
     * A list of the inputs that are never flashed to the session on validation exceptions.
     *
     * @var array<int, string>
     */
    protected $dontFlash = [
        'current_password',
        'password',
        'password_confirmation',
    ];


    public function render($request, Throwable $e)
    {


        $er = parent::render($request, $e);


        try {


            if ($er->getStatusCode() === 404 || $e instanceof MethodNotAllowedHttpException || ((env('APP_DEBUG') === false && !app()->runningInConsole()) && ($e instanceof ModelNotFoundException || $e->getPrevious() instanceof ModelNotFoundException))) {


                $a = getHostPrefix();

                if ($a === "m") {

                    return response()->view('mobile.404', [], 404);

                }

                return response()->view('pc.404', [], 404);


            }

        } catch (\Exception $exception) {


            return response('404', 404);

        }


        try {

            if (!env('APP_DEBUG')) {


                //获取错误页面
                $view = $this->renderExceptionWithCustomRenderer($e);


                \Log::error($e->getTraceAsString());


                $notice_email = getOption('notice_mail');

                if ($notice_email) {


                    dispatch(new EmailJob([$notice_email], env('APP_NAME') . "-报错日志-" . date("Y-m-d-H-i-s"),
                        $e->getMessage(), 'error.html', $view));

                }


                $a = getHostPrefix();

                if ($a === "m") {

                    return response()->view('mobile.500', [], 500);

                }

                return response()->view('pc.500', [], 500);


            }


            return $er; // TODO: Change the autogenerated stub


        } catch (\Exception $exception) {


            $view = $this->renderExceptionWithCustomRenderer($exception);

            if (env("APP_DEBUG") === true) {


                return response($view, 500);

            }


            $notice_email = getOption('notice_mail');

            if ($notice_email) {


                dispatch(new EmailJob([$notice_email], env('APP_NAME') . "-报错日志-" . date("Y-m-d-H-i-s"),
                    $exception->getMessage(), 'error.html', $view));

            }


            return response('500', 500);
        }


    }

    /**
     * Register the exception handling callbacks for the application.
     *
     * @return void
     */
    public function register()
    {


    }

}
